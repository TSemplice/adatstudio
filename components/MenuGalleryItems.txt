<template>
  <div
    :class="[
      $style.main,
      {
        [$style.backgrounded]: backgrounded
      }
    ]"
    v-viewport.initial="{ handleResize }"
  >
    <span
      :class="[
        $style.helper,
        {
          [$style.visible]: visible
        }
      ]"
      :style="{ transform: `translate3d(${x}px, ${y}px, 0)` }"
    >
      <p
        :class="[
          {
            [$style.prev]: type === 'prev',
            [$style.next]: type === 'next'
          }
        ]"
      />
    </span>
    <div :class="[
        $style.gallery,
        $style[ratio]
      ]"
      ref="gallery"
      @mousemove="handleMouseMove"
    >
      <nuxt-link
        data-card
        ref="cards"
        v-for="(item, ix) in newItems"
        :key="item._key"
        :to="localePath(`/menu/${item.slug.current}`)"
        :aria-label="`${item.translations[$i18n.locale].title} Menu Link`"
        :class="[
          $style[ratio],
          {
            [$style.active]: ix === index,
          }
        ]"
      >
        <InsetRoundedBorderImage
          :image="item.image"
          :hoverable="true"
        />
      </nuxt-link>
      <button aria-label="prev" @mouseover="handleMouseOver('prev')" @mouseout="handleMouseOut" @click="setIndex(-1)" />
      <button aria-label="next" @mouseover="handleMouseOver('next')" @mouseout="handleMouseOut" @click="setIndex(1)" />
    </div>
    <transition
      @enter="textIn"
      @leave="textOut"
      mode="out-in"
    >
      <div
        :class="$style.text"
        :key="newItems[index]._id"
        data-items
      >
        <h2 data-items>{{ newItems[index].translations[$i18n.locale].title }}</h2>
        <SanityContent
          :class="$style.paragraph"
          :blocks="newItems[index].translations[$i18n.locale].shortDesc"
        />
        <UnderlineCta data-items>
          <nuxt-link
            :to="localePath(`/menu/${newItems[index].slug.current}`)"
          >
            {{ $t('discover') }}
          </nuxt-link>
        </UnderlineCta>
      </div>
    </transition>
  </div>
</template>

<script>
import gsap, { Power4 } from 'gsap'
import { SplitText } from 'gsap/SplitText'
import { qs, qsa } from '~/assets/js/utils/generic'

let Hammer

if (process.client) {
  Hammer = require('hammerjs')
  gsap.registerPlugin(SplitText)
}

export default {
  props: {
      items: {
          type: Array,
          default: () => []
      },

      backgrounded: {
        type: Boolean,
        default: false
      },

      ratio: {
        type: String,
        default: 'squared'
      }
  },

  data() {
      return {
          index: 0,
          width: 0,
          amount: 0,
          animating: false,
          x: 0,
          y: 0,
          visible: false,
          type: ''
      };
  },

  computed: {
    newItems() {
      if (this.items.length > 3) {
        return this.items
      } else {
        const newArr = [...this.items, ...this.items]

        return newArr
      }
    },

    nextItem() {
      return this.index === this.newItems.length - 1 ? 0 : this.index + 1
    },

    prevItem() {
      return this.index === 0 ? this.newItems.length - 1 : this.index - 1
    }
  },

  mounted() {
    const hm = new Hammer(this.$refs.gallery)

    hm.on('swipeleft', () => {
      this.setIndex(1)
    })

    hm.on('swiperight', () => {
      this.setIndex(-1)
    })
  },

  methods: {
    setIndex(direction) {
      if (this.animating) return

      this.animateCards(direction)
    },

    handleMouseMove(e) {

      const { top } = e.target.getBoundingClientRect()
      const { clientX, clientY } = e
      this.x = clientX + 20
      this.y = (clientY - top) + 20
    },

    handleMouseOver(e) {
      this.type = e

      if (!this.visible) {
        this.visible = true
      }
    },

    handleMouseOut() {
      this.type = ''

      if (this.visible) {
        this.visible = false
      }
    },

    handleResize() {
      const mobile = window.innerWidth < 1024

      this.width = window.innerWidth * (mobile ? 75 : 50) / 100
      this.amount = (this.width) - (mobile ? 16 : 36)

      this.setInitial()
    },

    setInitial() {
      const { cards } = this.$refs

      cards.forEach(card => {
        gsap.set(card.$el, {
          x: -(this.amount * 2),
          scale: 0.8
        })
      })

      gsap.set(cards[this.prevItem].$el, {
        x: -this.amount,
      })

      gsap.set(cards[this.nextItem].$el, {
        x: this.amount
      })

      gsap.set(cards[this.index].$el, {
        x: 0,
        scale: 1
      })
    },

    animateCards(direction) {
      this.animating = true
      const { cards } = this.$refs
      const nextItem = this.nextItem
      const index = this.index
      const prevItem = this.prevItem

      this.index = direction === -1 ? (this.index === 0 ? this.newItems.length - 1 : this.index - 1) : (this.index === this.newItems.length - 1 ? 0 : this.index + 1)
      const tl = gsap.timeline({ onComplete: () => {
          this.animating = false
          this.$nuxt.$emit('update-locomotive')
      } })

      if (direction === -1) {
        const newPrev = prevItem === 0 ? this.newItems.length - 1 : prevItem - 1

        tl
          .add('start')
          .to(cards[nextItem].$el, {
            duration: 1.4,
            x: this.amount * 2,
            ease: Power4.easeOut
          }, 'start')
          .to(cards[index].$el, {
            duration: 1.4,
            x: this.amount,
            scale: 0.8,
            ease: Power4.easeOut
          }, 'start')
          .to(cards[prevItem].$el, {
            duration: 1.4,
            x: 0,
            scale: 1,
            ease: Power4.easeOut
          }, 'start')
          .fromTo(cards[newPrev].$el, {
            x: -this.amount * 2
          }, {
            duration: 1.4,
            x: -this.amount,
            ease: Power4.easeOut
          }, 'start')
      } else {
        const newNext = nextItem === this.newItems.length - 1 ? 0 : nextItem + 1

        tl
          .add('start')
          .to(cards[prevItem].$el, {
            duration: 1.4,
            x: -(this.amount * 2),
            ease: Power4.easeOut
          }, 'start')
          .to(cards[index].$el, {
            duration: 1.4,
            x: -this.amount,
            scale: 0.8,
            ease: Power4.easeOut
          }, 'start')
          .to(cards[nextItem].$el, {
            duration: 1.4,
            x: 0,
            scale: 1,
            ease: Power4.easeOut
          }, 'start')
          .fromTo(cards[newNext].$el, {
            x: this.amount * 2
          }, {
            duration: 1.4,
            x: this.amount,
            ease: Power4.easeOut
          }, 'start')
      }
    },

    textOut(el, done) {
      const title = qs('h2', el)
      const underline = qs('[data-underline]', el)
      const content = qsa('p', el)

      const tl = gsap.timeline({ onComplete: done })

      tl
        .to([title, ...content, underline], {
          duration: 1.2,
          y: -20,
          autoAlpha: 0,
          stagger: 0.06,
          ease: Power4.easeOut
        })
    },

    textIn(el, done) {
      const title = qs('h2', el)
      const underline = qs('[data-underline]', el)
      const content = qsa('p', el)

      const tl = gsap.timeline({ onComplete: done })

      tl
        .from([title, ...content, underline], {
          duration: 1.2,
          y: 20,
          autoAlpha: 0,
          stagger: 0.06,
          ease: Power4.easeOut
        })
    }
  }
}
</script>

<style module lang="postcss">
.main {
  @apply relative
    mt-[64px]
    lg:mt-[76px];

  &.backgrounded {
    .text {
      h2,
      p {
        @apply text-primary;
      }
    }

    .helper {
      @apply text-primary;
    }
  }
}
.main,
.gallery {
  @apply w-screen
    overflow-hidden;
}
.gallery {
  @apply flex
    justify-center
    relative
    h-[75vw]
    mb-[20px]
    lg:h-[35vw]
    lg:mb-[36px];

  cursor: grab;

  &.squared {
    @apply h-[75vw]
      lg:h-[35vw];
  }

  &.vertical {
    @apply h-[96vw]
      lg:h-[44.8vw];
  }

  &.horizontal {
    @apply h-[57.1875vw]
      lg:h-[26.6875vw];
  }

  & > a {
    @apply block
      absolute
      w-[75vw]
      lg:w-[35vw]
      pointer-events-none;

    flex: 0 0 auto;

    transform-origin: center bottom;
    transform: scale(0.8);

    &.active {
      pointer-events: all;
    }

    &.squared {
      & > div {
        padding-bottom: 100%;
      }
    }

    &.vertical {
      & > div {
        padding-bottom: 128%;
      }
    }

    &.horizontal {
      & > div {
        padding-bottom: 76.25%;
      }
    }
  }

  & > a:first-of-type {
    transform: scale(1);
  }

  & > button {
    @apply absolute
      top-0
      left-0
      w-[30vw]
      h-full;
  }

  & > button:last-of-type {
    @apply left-auto
      right-0;
  }
}
.text {
  @apply flex
    flex-col
    items-center
    text-center;

  & h2 {
    font-size: 32px;
    line-height: 40px;

    @apply font-heading
      lg:text-headline05
      text-secondary
      mb-[16px];
  }

  & p {
    @apply font-body
      font-bold
      text-paragraph
      px-[16px];

    letter-spacing: 0.1em;
  }

  & > div {
    @apply mb-[20px]
      lg:mb-[40px];
  }

  & [data-underline] {
    @apply mb-0;
  }
}

.paragraph {
  @apply w-full
    px-[12px];

  max-width: 500px;
}

.helper {
  @apply font-heading
    text-light
    absolute
    top-0
    left-0
    z-1
    opacity-0
    overflow-hidden
    text-paragraph
    uppercase;

  transition: var(--medium-transition);
  letter-spacing: 0.1em;

  &.visible {
    @apply lg:opacity-80;
  }

  & p {
    @apply h-[30px]
      w-[80px]
      relative;

    &::before {
      @apply absolute
        top-0
        left-0;

      content: 'prev';
      transform: translate3d(0, 130%, 0);
      transition: var(--medium-transition);
    }

    &::after {
      @apply absolute
        top-0
        left-0;

      content: 'next';
      transform: translate3d(0, 130%, 0);
      transition: var(--medium-transition);
    }

    &.prev {
      &::before {
        @screen lg {
          transform: translate3d(0, 0, 0);
        }
      }
    }

    &.next {
      &::after {
        @screen lg {
          transform: translate3d(0, 0, 0);
        }
      }
    }
  }
}
</style>
